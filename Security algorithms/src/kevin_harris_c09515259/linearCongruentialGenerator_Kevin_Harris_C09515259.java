package kevin_harris_c09515259;

import java.math.BigInteger;
import java.util.Random;

public class linearCongruentialGenerator_Kevin_Harris_C09515259 {
	public static void main(String args[]) {
		// constants
		BigInteger a = new BigInteger("1103515245");
		BigInteger c = new BigInteger("10294702", 20);
		BigInteger m = new BigInteger("48");

		//byte length
		int num = 100;

		BigInteger multiplier;

		BigInteger primeNumCheck = null;

		BigInteger prime10[] = new BigInteger[10];
		int positiveprimeNumCheck = 0, arraypositiveprimeNumCheckition = 0;

		Random rand = new Random();

		while (positiveprimeNumCheck != 1) {
			//generate byte length and randomise
			byte[] nextByte = new byte[num];
			rand.nextBytes(nextByte);
			multiplier = new BigInteger(nextByte);

			//calculate the a randomnumber
			primeNumCheck = a.multiply(multiplier).add(c.mod(m));

			//check if is positive
			if (primeNumCheck.signum() == 1) {
				//if the val isn't prime, add 1 to the value till the value turns to a prime number
				//add value to the array
				while (!isPrime(primeNumCheck)) {
					primeNumCheck = primeNumCheck.add(new BigInteger("1"));
					prime10[arraypositiveprimeNumCheckition] = primeNumCheck;
				}
				//increment the check/position if the value is prime
				if (isPrime(primeNumCheck)) {
					arraypositiveprimeNumCheckition++;

				}
				if (arraypositiveprimeNumCheckition == 10) {
					positiveprimeNumCheck = 1;
					break;
				}
			}
		}

		for (int counter = 0; counter < prime10.length; counter++) {
			System.out.println("Prime : " + prime10[counter]);
			System.out.println("Next Probable Prime : "
					+ prime10[counter].nextProbablePrime());
		}
		//check public key
		String pub = "1098169786670749010068856667656870987010283489754105508851881211027148781138610111689738412151435085678111911812249110851181001218853498284519857731224757529786878387558551757357122110558556113837010311610110311781997611310366481187411410068908578811206950908790571031137873521217597746778727511155789043120111688297103884811910410611398985111098487782116109551205210469105109656856101667274861218283534310312197665147110568482114431001031179712251756883848257651011101104877111835510248104114868211255122109807610888665699717879745179786655118541217170991176811654120711088112111176101105678010273491065073119897269118100481055712178116767111010956105708810979105908768758875108898497122898910510056507010911148871078012147541081138898858351114507297525583691009970119766569109477381746665110101869011878905111787666984113726566696665657148758666111978712011299676678100887412189881071038070661119787120112996753781008874121898810753798566110988770112986753106985048431058169436666776665103651116681748387888149651041151066681107749010371656610311574676599686510389866765737467103115697010373686581731016581738810365657567826611347661121127777901111081175610367656711511175701041004878868453744984481097412210553998953897199114905283778873885270110659853111571021154355848510674103558056675554905266787176113536712275905710775671148465766970661087668795478874310357709911674115436967841166557431181098110897519912211911999681137783568198108478284787311367997583121110108988881103102544752818910776908410680122815283471018049841057289881081105365775110880547979747510911152106487411676821125111673110100986953771131184712253799810371727111851121508143791178511311072100541226957103121561137111599901001221048210711651101121517572721161149711986551138911687971151161065257561087969107525581115100102521015111269789010483109859910789120105100908374475380516643113818553101661061059710685118118651211011191161184711843101788910812268105119769897113721131118187705010389117816978667074901006885666765674869529010890537181117878790568257864965431208610980565767537011575117576611785106729757778711811477108817469108497854567576100122119757911311155759990117119115578710687981158111674861077779110506588103102119899799531151165352687476876510967901031071201011025350116701027279689072119102119538811810866671048572725743527854119100665555527753110816911211286876982855511511610997103905311010278113817176100658074111107491185051891139965838883521191148911811773105114558678122477611810511810411667118701148680818370110116497053858397101875110111410310050861227685751181121158210898104691135557501096911374496569777911069102111104754850111797371711027911110411898101111867410198995312271989011211168715179661001178867122105115671158998112431154910111211710011510580471217010411086784880906510712069106117491226510110865666966656571746583856971656967656556706510874901006885677111911970678110810965896565671031078197118119979784687197749811811911910365107578912088705274701081191061131186682496610398681211156599105567512080534811373808455975610174765252109431158655761119710269781111101078484687950771081097411953501127975821226848689772807410374110511161185374107731191011145368111831067950689897104116975310966120100119556680107778050698874758156105655185577399105121771226847102112816684791161171116648684770841214768106501118312010471539069715668122999711711411379971017079801171099053851036985531137667751155552708972821015565110995711650721164387116787811051109547012056651218485747989102108103761127984891037768687052100677811880117568410312112011765904787537810143501058367103499710411811910411657107715371765298113517966511041028489111521108711397116438286121116854370687043668211110111797686954504751835010488102115114847280121115747973121103616161116765688";
		BigInteger bi = new BigInteger(pub);
		if (isPrime(bi)) {
			System.out.println("public key is prime");

		} else {

			System.out.println("public key is not prime");
		}

	}

	public static boolean isPrime(BigInteger primeNumberCheck) {
		//check if primeNumberCheck if a prime number, return true if so and false if not
		if (primeNumberCheck.isProbablePrime(1)) {
			return true;
		} else {
			return false;
		}
	}
}